
thermost_hygrometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081f  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073f  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029b  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d3  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupTimer0>:
void startTimer0() {
  TCCR0B |= (1 << CS00); // No prescaling
}

void stopTimer0() {
  TCCR0B  |= (0 << CS00);
  90:	84 b5       	in	r24, 0x24	; 36
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 bd       	out	0x24, r24	; 36
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	87 bd       	out	0x27, r24	; 39
  9a:	ee e6       	ldi	r30, 0x6E	; 110
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <startTimer0>:
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	85 bd       	out	0x25, r24	; 37
  ae:	08 95       	ret

000000b0 <readDHT11>:
}

/*********
   DHT11
 ********/
void readDHT11() {
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <readDHT11+0x6>
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  char number[2];
  // Start communication
  //digitalWrite(dht11, LOW);

  while (tick <= 30) {
  ba:	09 c0       	rjmp	.+18     	; 0xce <readDHT11+0x1e>
    itoa(tick, number, 10);
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c0:	4a e0       	ldi	r20, 0x0A	; 10
  c2:	be 01       	movw	r22, r28
  c4:	6f 5f       	subi	r22, 0xFF	; 255
  c6:	7f 4f       	sbci	r23, 0xFF	; 255
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 8a 00 	call	0x114	; 0x114 <__itoa_ncheck>
void readDHT11() {
  char number[2];
  // Start communication
  //digitalWrite(dht11, LOW);

  while (tick <= 30) {
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	8f 31       	cpi	r24, 0x1F	; 31
  d4:	98 f3       	brcs	.-26     	; 0xbc <readDHT11+0xc>
    itoa(tick, number, 10);
  }

  //stopTimer0();
  tick = 0;
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

}
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <__vector_14>:

/***********************
   Interrupts handlers
 **********************/
ISR(TIMER0_COMPA_vect) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  tick++;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void)
{
    /* Replace with your application code */
	setupTimer0();
 106:	0e 94 48 00 	call	0x90	; 0x90 <setupTimer0>
	startTimer0();
 10a:	0e 94 54 00 	call	0xa8	; 0xa8 <startTimer0>
	
    while (1) 
    {
		readDHT11();
 10e:	0e 94 58 00 	call	0xb0	; 0xb0 <readDHT11>
 112:	fd cf       	rjmp	.-6      	; 0x10e <main+0x8>

00000114 <__itoa_ncheck>:
 114:	bb 27       	eor	r27, r27
 116:	4a 30       	cpi	r20, 0x0A	; 10
 118:	31 f4       	brne	.+12     	; 0x126 <__itoa_ncheck+0x12>
 11a:	99 23       	and	r25, r25
 11c:	22 f4       	brpl	.+8      	; 0x126 <__itoa_ncheck+0x12>
 11e:	bd e2       	ldi	r27, 0x2D	; 45
 120:	90 95       	com	r25
 122:	81 95       	neg	r24
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	0c 94 96 00 	jmp	0x12c	; 0x12c <__utoa_common>

0000012a <__utoa_ncheck>:
 12a:	bb 27       	eor	r27, r27

0000012c <__utoa_common>:
 12c:	fb 01       	movw	r30, r22
 12e:	55 27       	eor	r21, r21
 130:	aa 27       	eor	r26, r26
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	a4 17       	cp	r26, r20
 13a:	10 f0       	brcs	.+4      	; 0x140 <__utoa_common+0x14>
 13c:	a4 1b       	sub	r26, r20
 13e:	83 95       	inc	r24
 140:	50 51       	subi	r21, 0x10	; 16
 142:	b9 f7       	brne	.-18     	; 0x132 <__utoa_common+0x6>
 144:	a0 5d       	subi	r26, 0xD0	; 208
 146:	aa 33       	cpi	r26, 0x3A	; 58
 148:	08 f0       	brcs	.+2      	; 0x14c <__utoa_common+0x20>
 14a:	a9 5d       	subi	r26, 0xD9	; 217
 14c:	a1 93       	st	Z+, r26
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	79 f7       	brne	.-34     	; 0x130 <__utoa_common+0x4>
 152:	b1 11       	cpse	r27, r1
 154:	b1 93       	st	Z+, r27
 156:	11 92       	st	Z+, r1
 158:	cb 01       	movw	r24, r22
 15a:	0c 94 af 00 	jmp	0x15e	; 0x15e <strrev>

0000015e <strrev>:
 15e:	dc 01       	movw	r26, r24
 160:	fc 01       	movw	r30, r24
 162:	67 2f       	mov	r22, r23
 164:	71 91       	ld	r23, Z+
 166:	77 23       	and	r23, r23
 168:	e1 f7       	brne	.-8      	; 0x162 <strrev+0x4>
 16a:	32 97       	sbiw	r30, 0x02	; 2
 16c:	04 c0       	rjmp	.+8      	; 0x176 <strrev+0x18>
 16e:	7c 91       	ld	r23, X
 170:	6d 93       	st	X+, r22
 172:	70 83       	st	Z, r23
 174:	62 91       	ld	r22, -Z
 176:	ae 17       	cp	r26, r30
 178:	bf 07       	cpc	r27, r31
 17a:	c8 f3       	brcs	.-14     	; 0x16e <strrev+0x10>
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
